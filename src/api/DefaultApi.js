/*
 * Car Rental API
 * API for managing cars and reservations in a car rental system.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Car from '../model/Car';
import Reservation from '../model/Reservation';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createCar operation.
     * @callback moduleapi/DefaultApi~createCarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Car{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new car
     * @param {module:model/Car} body 
     * @param {module:api/DefaultApi~createCarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createCar(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCar");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Car;

      return this.apiClient.callApi(
        '/cars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createReservation operation.
     * @callback moduleapi/DefaultApi~createReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reservation{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new reservation
     * @param {module:model/Reservation} body 
     * @param {module:api/DefaultApi~createReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createReservation(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createReservation");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reservation;

      return this.apiClient.callApi(
        '/reservations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteCar operation.
     * @callback moduleapi/DefaultApi~deleteCarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a car by ID
     * @param {String} carId 
     * @param {module:api/DefaultApi~deleteCarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCar(carId, callback) {
      
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling deleteCar");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cars/{carId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteReservation operation.
     * @callback moduleapi/DefaultApi~deleteReservationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a reservation by ID
     * @param {String} reservationId 
     * @param {module:api/DefaultApi~deleteReservationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReservation(reservationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling deleteReservation");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reservations/{reservationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCarById operation.
     * @callback moduleapi/DefaultApi~getCarByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Car{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve car details by ID
     * @param {String} carId 
     * @param {module:api/DefaultApi~getCarByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCarById(carId, callback) {
      
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling getCarById");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Car;

      return this.apiClient.callApi(
        '/cars/{carId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCars operation.
     * @callback moduleapi/DefaultApi~getCarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Car>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all cars
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status Filter cars by status (available, rented, maintenance)
     * @param {module:api/DefaultApi~getCarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCars(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Car];

      return this.apiClient.callApi(
        '/cars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getReservationById operation.
     * @callback moduleapi/DefaultApi~getReservationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reservation{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve reservation details by ID
     * @param {String} reservationId 
     * @param {module:api/DefaultApi~getReservationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getReservationById(reservationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling getReservationById");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reservation;

      return this.apiClient.callApi(
        '/reservations/{reservationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getReservations operation.
     * @callback moduleapi/DefaultApi~getReservationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reservation>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all reservations
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status Filter reservations by status (pending, confirmed, canceled)
     * @param {module:api/DefaultApi~getReservationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getReservations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reservation];

      return this.apiClient.callApi(
        '/reservations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateCar operation.
     * @callback moduleapi/DefaultApi~updateCarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a car by ID
     * @param {module:model/Car} body 
     * @param {String} carId 
     * @param {module:api/DefaultApi~updateCarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCar(body, carId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCar");
      }
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling updateCar");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cars/{carId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateReservation operation.
     * @callback moduleapi/DefaultApi~updateReservationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a reservation by ID
     * @param {module:model/Reservation} body 
     * @param {String} reservationId 
     * @param {module:api/DefaultApi~updateReservationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateReservation(body, reservationId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateReservation");
      }
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling updateReservation");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reservations/{reservationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}