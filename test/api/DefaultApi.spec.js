/*
 * Car Rental API
 * API for managing cars and reservations in a car rental system.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CarRentalApi);
  }
}(this, function(expect, CarRentalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CarRentalApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('createCar', function() {
        it('should call createCar successfully', function(done) {
          // TODO: uncomment, update parameter values for createCar call and complete the assertions
          /*

          instance.createCar(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarRentalApi.Car);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createReservation', function() {
        it('should call createReservation successfully', function(done) {
          // TODO: uncomment, update parameter values for createReservation call and complete the assertions
          /*

          instance.createReservation(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarRentalApi.Reservation);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteCar', function() {
        it('should call deleteCar successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCar call
          /*

          instance.deleteCar(carId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteReservation', function() {
        it('should call deleteReservation successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteReservation call
          /*

          instance.deleteReservation(reservationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCarById', function() {
        it('should call getCarById successfully', function(done) {
          // TODO: uncomment, update parameter values for getCarById call and complete the assertions
          /*

          instance.getCarById(carId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarRentalApi.Car);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCars', function() {
        it('should call getCars successfully', function(done) {
          // TODO: uncomment, update parameter values for getCars call and complete the assertions
          /*
          var opts = {};

          instance.getCars(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CarRentalApi.Car);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReservationById', function() {
        it('should call getReservationById successfully', function(done) {
          // TODO: uncomment, update parameter values for getReservationById call and complete the assertions
          /*

          instance.getReservationById(reservationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarRentalApi.Reservation);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReservations', function() {
        it('should call getReservations successfully', function(done) {
          // TODO: uncomment, update parameter values for getReservations call and complete the assertions
          /*
          var opts = {};

          instance.getReservations(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CarRentalApi.Reservation);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCar', function() {
        it('should call updateCar successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCar call
          /*

          instance.updateCar(body, carId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateReservation', function() {
        it('should call updateReservation successfully', function(done) {
          // TODO: uncomment, update parameter values for updateReservation call
          /*

          instance.updateReservation(body, reservationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
